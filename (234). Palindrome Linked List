/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
// we will reverse the linked list from mid and then check it by using two poiter 
//  1->2->3->4->4->3->2->1->->NULL           this become           1->2->3->4->NULL<-4<-3<-2<-1
class Solution {
public:
    bool isPalindrome(ListNode* head) {
         if(head==NULL || head->next==NULL)
             return true;
        
        ListNode *slow=head;
        ListNode *fast=head;
        ListNode *prev=NULL;

        // to get the mid value    if even then return the 2nd mid
        while(fast!=NULL && fast->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
            
        }
          ListNode *curr=slow;
        
      //  reversing from the mid
        while(curr!=NULL)
        {
            ListNode * n=curr->next;
            curr->next=prev;
            prev=curr;
            curr=n;
            
        }
        curr=prev;
        while(curr)
        {
            if(head->val!=curr->val)
                return false;
            head=head->next;
            curr=curr->next;
        }
        return true;
       
        
    }
};
